# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import batlshm_pb2 as batlshm__pb2


class BatlShmStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBuffer = channel.unary_unary(
                '/BatlShm/CreateBuffer',
                request_serializer=batlshm__pb2.CreateBufferRequest.SerializeToString,
                response_deserializer=batlshm__pb2.CreateBufferReply.FromString,
                )
        self.GetBuffer = channel.unary_unary(
                '/BatlShm/GetBuffer',
                request_serializer=batlshm__pb2.GetBufferRequest.SerializeToString,
                response_deserializer=batlshm__pb2.GetBufferReply.FromString,
                )
        self.ReleaseBuffer = channel.unary_unary(
                '/BatlShm/ReleaseBuffer',
                request_serializer=batlshm__pb2.ReleaseBufferRequest.SerializeToString,
                response_deserializer=batlshm__pb2.StandardReply.FromString,
                )
        self.RegisterTopic = channel.unary_unary(
                '/BatlShm/RegisterTopic',
                request_serializer=batlshm__pb2.RegisterTopicRequest.SerializeToString,
                response_deserializer=batlshm__pb2.StandardReply.FromString,
                )
        self.Publish = channel.unary_unary(
                '/BatlShm/Publish',
                request_serializer=batlshm__pb2.PublishRequest.SerializeToString,
                response_deserializer=batlshm__pb2.StandardReply.FromString,
                )
        self.GenerateID = channel.unary_unary(
                '/BatlShm/GenerateID',
                request_serializer=batlshm__pb2.Empty.SerializeToString,
                response_deserializer=batlshm__pb2.GenerateIDReply.FromString,
                )
        self.Subscribe = channel.unary_unary(
                '/BatlShm/Subscribe',
                request_serializer=batlshm__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=batlshm__pb2.StandardReply.FromString,
                )
        self.Pull = channel.unary_unary(
                '/BatlShm/Pull',
                request_serializer=batlshm__pb2.PullRequest.SerializeToString,
                response_deserializer=batlshm__pb2.PullReply.FromString,
                )


class BatlShmServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateBuffer(self, request, context):
        """Shared memory operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBuffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseBuffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterTopic(self, request, context):
        """Intended for publishers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateID(self, request, context):
        """Intended for subscribers
        rpc GetTopics(Empty) returns (TopicList) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BatlShmServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBuffer,
                    request_deserializer=batlshm__pb2.CreateBufferRequest.FromString,
                    response_serializer=batlshm__pb2.CreateBufferReply.SerializeToString,
            ),
            'GetBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBuffer,
                    request_deserializer=batlshm__pb2.GetBufferRequest.FromString,
                    response_serializer=batlshm__pb2.GetBufferReply.SerializeToString,
            ),
            'ReleaseBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseBuffer,
                    request_deserializer=batlshm__pb2.ReleaseBufferRequest.FromString,
                    response_serializer=batlshm__pb2.StandardReply.SerializeToString,
            ),
            'RegisterTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTopic,
                    request_deserializer=batlshm__pb2.RegisterTopicRequest.FromString,
                    response_serializer=batlshm__pb2.StandardReply.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=batlshm__pb2.PublishRequest.FromString,
                    response_serializer=batlshm__pb2.StandardReply.SerializeToString,
            ),
            'GenerateID': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateID,
                    request_deserializer=batlshm__pb2.Empty.FromString,
                    response_serializer=batlshm__pb2.GenerateIDReply.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=batlshm__pb2.SubscribeRequest.FromString,
                    response_serializer=batlshm__pb2.StandardReply.SerializeToString,
            ),
            'Pull': grpc.unary_unary_rpc_method_handler(
                    servicer.Pull,
                    request_deserializer=batlshm__pb2.PullRequest.FromString,
                    response_serializer=batlshm__pb2.PullReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BatlShm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BatlShm(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/CreateBuffer',
            batlshm__pb2.CreateBufferRequest.SerializeToString,
            batlshm__pb2.CreateBufferReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/GetBuffer',
            batlshm__pb2.GetBufferRequest.SerializeToString,
            batlshm__pb2.GetBufferReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/ReleaseBuffer',
            batlshm__pb2.ReleaseBufferRequest.SerializeToString,
            batlshm__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/RegisterTopic',
            batlshm__pb2.RegisterTopicRequest.SerializeToString,
            batlshm__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/Publish',
            batlshm__pb2.PublishRequest.SerializeToString,
            batlshm__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/GenerateID',
            batlshm__pb2.Empty.SerializeToString,
            batlshm__pb2.GenerateIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/Subscribe',
            batlshm__pb2.SubscribeRequest.SerializeToString,
            batlshm__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BatlShm/Pull',
            batlshm__pb2.PullRequest.SerializeToString,
            batlshm__pb2.PullReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
